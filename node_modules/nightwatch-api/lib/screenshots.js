"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createFailureScreenshot = createFailureScreenshot;

var _util = _interopRequireDefault(require("util"));

var _path = _interopRequireDefault(require("path"));

var _protocol = _interopRequireDefault(require("nightwatch/lib/api/protocol"));

var _screenshots = _interopRequireDefault(require("nightwatch/lib/testsuite/screenshots"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getFileName() {
  const date = new Date();
  const datestamp = new Date(date.getTime() - date.getTimezoneOffset() * 60000).toISOString().replace(/[:\-Z]/g, '').replace(/[T.]/g, '-');
  return `${datestamp}.png`;
}

function saveFailureScreenshot(fileName, screenshotData) {
  return new Promise((resolve, reject) => {
    _screenshots.default.writeScreenshotToFile(fileName, screenshotData, err => {
      if (err) {
        return reject(err);
      }

      return resolve();
    });
  });
}

async function createFailureScreenshot(client) {
  const protocolInstance = new _protocol.default(client);
  const screenshotData = await new Promise((resolve, reject) => {
    protocolInstance.Actions.screenshot.call(protocolInstance, false, response => {
      if (response.state && response.state !== 'success' || response.status) {
        return reject(new Error(`Creating screenshot was not successful. Response was:\n${_util.default.inspect(response)}`));
      }

      return resolve(response.value);
    });
  });

  const fileName = _path.default.join(client.api.screenshotsPath, getFileName());

  await saveFailureScreenshot(fileName, screenshotData);
  return fileName;
}